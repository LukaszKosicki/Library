// <auto-generated />
using System;
using Library.Models.BookRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations.LibraryDb
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20191229094431_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Authors", b =>
                {
                    b.Property<string>("AuthorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookId");

                    b.Property<string>("Name");

                    b.HasKey("AuthorId");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasFilter("[BookId] IS NOT NULL");

                    b.ToTable("Book_Authors");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Copies", b =>
                {
                    b.Property<string>("CopiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookId");

                    b.Property<int>("No_Of_Copies");

                    b.HasKey("CopiesId");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasFilter("[BookId] IS NOT NULL");

                    b.ToTable("Book_Copies");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Loans", b =>
                {
                    b.Property<string>("LoansId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookId");

                    b.Property<DateTime>("Date_In");

                    b.Property<DateTime>("Date_Out");

                    b.Property<string>("UserId");

                    b.HasKey("LoansId");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasFilter("[BookId] IS NOT NULL");

                    b.ToTable("Book_Loans");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookId");

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.HasIndex("BookId")
                        .IsUnique()
                        .HasFilter("[BookId] IS NOT NULL");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Authors", b =>
                {
                    b.HasOne("Library.Models.BookRepository.Model.Book")
                        .WithOne("Get_Book_Authors")
                        .HasForeignKey("Library.Models.BookRepository.Model.Book_Authors", "BookId");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Copies", b =>
                {
                    b.HasOne("Library.Models.BookRepository.Model.Book")
                        .WithOne("Get_Book_Copies")
                        .HasForeignKey("Library.Models.BookRepository.Model.Book_Copies", "BookId");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Book_Loans", b =>
                {
                    b.HasOne("Library.Models.BookRepository.Model.Book")
                        .WithOne("Book_Loans")
                        .HasForeignKey("Library.Models.BookRepository.Model.Book_Loans", "BookId");
                });

            modelBuilder.Entity("Library.Models.BookRepository.Model.Category", b =>
                {
                    b.HasOne("Library.Models.BookRepository.Model.Book")
                        .WithOne("Get_Category")
                        .HasForeignKey("Library.Models.BookRepository.Model.Category", "BookId");
                });
#pragma warning restore 612, 618
        }
    }
}
